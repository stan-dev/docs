---
pagetitle: Complex-Valued Basic Functions
---

# Complex-Valued Basic Functions



This chapter describes built-in functions that operate on complex
numbers, either as an argument type or a return type.  This includes
the arithmetic operators generalized to complex numbers.

## Complex assignment and promotion {#complex-assign-promote}

Just as integers may be assigned to real variables, real variables may
be assigned to complex numbers, with the result being a zero imaginary
component.

```stan
int n = 5;       // n = 5
real x = a;      // x = 5.0
complex z1 = n;  // z = 5.0 + 0.0i
complex z2 = x;  // z = 5.0 + 0.0i
```

### Complex function arguments

Function arguments of type `int` or `real` may be promoted to type
`complex`.  The complex version of functions in this chapter are only
used if one of the arguments is complex.  For example, if `z` is
complex, then `pow(z, 2)` will call the complex version of the power
function and the integer 2 will be promoted to a complex number with a
real component of 2 and an imaginary component of 0.  The same goes
for binary operators like addition and subtraction, where `z + 2` will
be legal and produce a complex result.  Functions such as `arg` and
`conj` that are only available for complex numbers can accept integer
or real arguments, promoting them to `complex` before applying the
function.


## Complex constructors and accessors {#complex-constructors}

### Complex constructors

Variables and constants of type `complex` are constructed from zero,
one, or two real numbers.

```stan
complex z1 = to_complex();        // z1 = 0.0 + 0.0i
real re = -2.9;
complex z2 = to_complex(re);      // z2 = -2.9 + 0.0i
real im = 1.3;
complex z3 = to_complex(re, im);  // z3 = -2.9 + 1.3i
```

<!-- complex; to_complex; (); -->
\index{{\tt \bfseries to\_complex }!{\tt (): complex}|hyperpage}

`complex` **`to_complex`**`()`<br>\newline
Return complex number with real part 0.0 and imaginary part 0.0.
{{< since 2.28 >}}

<!-- complex; to_complex; (real re); -->
\index{{\tt \bfseries to\_complex }!{\tt (real re): complex}|hyperpage}

`complex` **`to_complex`**`(real re)`<br>\newline
Return complex number with real part `re` and imaginary part 0.0.
{{< since 2.28 >}}

<!-- complex; to_complex; (real re, real im); -->
\index{{\tt \bfseries to\_complex }!{\tt (real re, real im): complex}|hyperpage}

`complex` **`to_complex`**`(real re, real im)`<br>\newline
Return complex number with real part `re` and imaginary part `im`.
{{< since 2.28 >}}

<!-- Z; to_complex; (T1 re, T2 im); -->
\index{{\tt \bfseries to\_complex }!{\tt (T1 re, T2 im): Z}|hyperpage}

`Z` **`to_complex`**`(T1 re, T2 im)`<br>\newline
Vectorized implementation of the `to_complex` function.

`T1` and `T2` can either be real containers of the same size, or a real
container and a real, in which case the real value is used for the corresponding
component in all elements of the output.
{{< since 2.30 >}}

### Complex accessors

Given a complex number, its real and imaginary parts can be
extracted with the following functions.


<!-- real; get_real; (complex z); -->
\index{{\tt \bfseries get\_real }!{\tt (complex z): real}|hyperpage}

`real` **`get_real`**`(complex z)`<br>\newline
Return the real part of the complex number `z`.
{{< since 2.28 >}}

<!-- real; get_imag; (complex z); -->
\index{{\tt \bfseries get\_imag }!{\tt (complex z): real}|hyperpage}

`real` **`get_imag`**`(complex z)`<br>\newline
Return the imaginary part of the complex number `z`.
{{< since 2.28 >}}

## Complex arithmetic operators {#complex-arithmetic}

The arithmetic operators have the same precedence for complex and real
arguments.  The complex form of an operator will be selected if at
least one of its argument is of type `complex`.  If there are two
arguments and only one is of type `complex`, then the other will be
promoted to type `complex` before performing the operation.

### Unary operators

<!-- complex; operator+; (complex z); -->
\index{{\tt \bfseries operator\_add}!{\tt (complex z): complex}|hyperpage}

`complex` **`operator+`**`(complex z)`<br>\newline
Return the complex argument `z`, \begin{equation*} +z = z. \end{equation*}
{{< since 2.28 >}}


<!-- complex; operator-; (complex z); -->
\index{{\tt \bfseries operator\_subtract}!{\tt (complex z): complex}|hyperpage}

`complex` **`operator-`**`(complex z)`<br>\newline
Return the negation of the complex argument `z`, which for $z = x + yi$ is
\begin{equation*} -z = -x - yi. \end{equation*}
{{< since 2.28 >}}

<!-- T; operator-; (T x); -->
\index{{\tt \bfseries operator\_subtract }!{\tt (T x): T}|hyperpage}

`T` **`operator-`**`(T x)`<br>\newline
Vectorized version of `operator-`. If `T x` is a (possibly nested) array of
complex numbers, `-x` is the same shape array where each individual value is negated.
{{< since 2.31 >}}


### Binary operators

<!-- complex; operator+; (complex x, complex y); -->
\index{{\tt \bfseries operator\_add }!{\tt (complex x, complex y): complex}|hyperpage}

`complex` **`operator+`**`(complex x, complex y)`<br>\newline
Return the sum of x and y, \begin{equation*} (x + y) = \text{operator+}(x, y) = x + y. \end{equation*}
{{< since 2.28 >}}

<!-- complex; operator-; (complex x, complex y); -->
\index{{\tt \bfseries operator\_subtract }!{\tt (complex x, complex y): complex}|hyperpage}

`complex` **`operator-`**`(complex x, complex y)`<br>\newline
Return the difference between x and y, \begin{equation*} (x - y) =
\text{operator-}(x, y) = x - y. \end{equation*}
{{< since 2.28 >}}

<!-- complex; operator*; (complex x, complex y); -->
\index{{\tt \bfseries operator\_multiply }!{\tt (complex x, complex y): complex}|hyperpage}

`complex` **`operator*`**`(complex x, complex y)`<br>\newline
Return the product of x and y, \begin{equation*} (x \, * \, y) = \text{operator*}(x, y) = x
\times y. \end{equation*}
{{< since 2.28 >}}

<!-- complex; operator/; (complex x, complex y); -->
\index{{\tt \bfseries operator\_divide }!{\tt (complex x, complex y): complex}|hyperpage}

`complex` **`operator/`**`(complex x, complex y)`<br>\newline
Return the quotient of x and y, \begin{equation*} (x / y) = \text{operator/}(x,y) =
\frac{x}{y} \end{equation*}
{{< since 2.28 >}}

<!-- complex; operator^; (complex x, complex y); -->
\index{{\tt \bfseries operator\_pow }!{\tt (complex x, complex y): complex}|hyperpage}

`complex` **`operator^`**`(complex x, complex y)`<br>\newline
Return x raised to the power of y,
\begin{equation*}
(x^\mathrm{\wedge}y)= \text{operator}^\mathrm{\wedge}(x,y)
= \textrm{exp}(y \, \log(x)).
\end{equation*}
{{< since 2.28 >}}

## Complex comparison operators {#complex-comparison}

Complex numbers are equal if and only if both their real and imaginary
components are equal.  That is, the conditional

```stan
z1 == z2
```

is equivalent to

```stan
get_real(z1) == get_real(z2) && get_imag(z1) == get_imag(z2)
```

As with other complex functions, if one of the arguments is of type
`real` or `int`, it will be promoted to type `complex` before
comparison.  For example, if `z` is of type `complex`, then `z == 0`
will be true if `z` has real component equal to 0.0 and complex
component equal to 0.0.

_Warning:_ As with real values, it is usually a mistake
to compare complex numbers for equality because their parts are
implemented using floating-point arithmetic, which suffers from
precision errors, rendering algebraically equivalent expressions not
equal after evaluation.


<!-- int; operator==; (complex x, complex y); -->
\index{{\tt \bfseries operator\_logical\_equal }!{\tt (complex x, complex y): int}|hyperpage}

`int` **`operator==`**`(complex x, complex y)`<br>\newline
Return 1 if x is equal to y and 0 otherwise,
\begin{equation*}
(x \,\text{==}\, y)
\ = \ \text{operator==}(x,y)
\ = \ \begin{cases} 1 & \text{if $x = y$}, \ \text{and} \\ 0 & \text{otherwise.}
\end{cases}
\end{equation*}
{{< since 2.28 >}}


<!-- int; operator!=; (complex x, complex y); -->
\index{{\tt \bfseries operator\_logical\_not\_equal }!{\tt (complex x, complex y): int}|hyperpage}

`int` **`operator!=`**`(complex x, complex y)`<br>\newline
Return 1 if x is not equal to y and 0 otherwise,
\begin{equation*}
(x \,\text{!=}\, y)
\ = \ \text{operator!=}(x,y)
\ = \ \begin{cases} 1 & \text{if $x \neq y$}, \ \text{and} \\ 0 &
\text{otherwise.} \end{cases}
\end{equation*}
{{< since 2.28 >}}

## Complex (compound) assignment operators {#complex-assignment}

The assignment operator only serves as a component in the assignment
statement and is thus not technically a function in the Stan
language.  With that caveat, it is documented here for completeness.

Assignment of complex numbers works elementwise.  If an expression of
type `int` or `real` is assigned to a complex number, it will be
promoted before assignment as if calling `to_complex()`, so that the
imaginary component is 0.0.


<!-- void; operator=; (complex x, complex y); -->
\index{{\tt \bfseries operator\_assign }!{\tt (complex x, complex y): void}|hyperpage}

`void` **`operator=`**`(complex x, complex y)`<br>\newline
`y = x;` assigns a (copy of) the value of `y` to `x`.
{{< since 2.28 >}}


<!-- void; operator+=; (complex x, complex y); -->
\index{{\tt \bfseries operator\_compound\_add }!{\tt (complex x, complex y): void}|hyperpage}

`void` **`operator+=`**`(complex x, complex y)`<br>\newline
`x += y;` is equivalent to `x = x + y;`.
{{< since 2.28 >}}

<!-- void; operator-=; (complex x, complex y); -->
\index{{\tt \bfseries operator\_compound\_subtract }!{\tt (complex x, complex y): void}|hyperpage}

`void` **`operator-=`**`(complex x, complex y)`<br>\newline
`x -= y;` is equivalent to `x = x - y;`.
{{< since 2.28 >}}

<!-- void; operator*=; (complex x, complex y); -->
\index{{\tt \bfseries operator\_compound\_multiply }!{\tt (complex x, complex y): void}|hyperpage}

`void` **`operator*=`**`(complex x, complex y)`<br>\newline
`x *= y;` is equivalent to `x = x * y;`.
{{< since 2.28 >}}

<!-- void; operator/=; (complex x, complex y); -->
\index{{\tt \bfseries operator\_compound\_divide }!{\tt (complex x, complex y): void}|hyperpage}

`void` **`operator/=`**`(complex x, complex y)`<br>\newline
`x /= y;` is equivalent to `x = x / y;`.
{{< since 2.28 >}}


## Complex special functions {#complex-special}

The following functions are specific to complex numbers other than
absolute value, which has a specific meaning for complex numbers.


<!-- real; abs; (complex z); -->
\index{{\tt \bfseries abs }!{\tt (complex z): real}|hyperpage}

`real` **`abs`**`(complex z)`<br>\newline
Return the absolute value of z, also known as the modulus or
magnitude, which for $z = x + yi$ is
\begin{equation*}
\textrm{abs}(z) = \sqrt{x^2 + y^2}.
\end{equation*}

This function works elementwise over containers, returning the same shape and
kind of the input container but holding reals. For example, a
`complex_vector[n]` input will return a `vector[n]` output, with each element
transformed by the above equation.
{{< since "2.28, vectorized in 2.30" >}}

<!-- real; arg; (complex z); -->
\index{{\tt \bfseries arg }!{\tt (complex z): real}|hyperpage}

`real` **`arg`**`(complex z)`<br>\newline
Return the phase angle (in radians) of z, which for $z = x + yi$ is
\begin{equation*}
\textrm{arg}(z) = \textrm{atan2}(y, x) = \textrm{atan}(y / x).
\end{equation*}
{{< since 2.28 >}}

<!-- real; norm; (complex z); -->
\index{{\tt \bfseries norm }!{\tt (complex z): real}|hyperpage}

`real` **`norm`**`(complex z)`<br>\newline
Return the Euclidean norm of z, which is its absolute value squared,
and which for $z = x + yi$ is
\begin{equation*}
\textrm{norm}(z) = \textrm{abs}^2(z) = x^2 + y^2.
\end{equation*}
{{< since 2.28 >}}

<!-- complex; conj; (complex z); -->
\index{{\tt \bfseries conj }!{\tt (complex z): complex}|hyperpage}

`complex` **`conj`**`(complex z)`<br>\newline
Return the complex conjugate of z, which negates the imaginary component,
so that if $z = x + yi$,
\begin{equation*}
\textrm{conj}(z) = x - yi.
\end{equation*}
{{< since 2.28 >}}

<!-- Z; conj; (Z z); -->
\index{{\tt \bfseries conj }!{\tt (Z z): Z}|hyperpage}

`Z` **`conj`**`(Z z)`<br>\newline
Vectorized version of `conj`. This will apply the `conj` function
to each element of a complex array, vector, or matrix.
{{< since 2.31 >}}

<!-- complex; proj; (complex z); -->
\index{{\tt \bfseries proj }!{\tt (complex z): complex}|hyperpage}

`complex` **`proj`**`(complex z)`<br>\newline
Return the projection of `z` onto the Riemann sphere, which for $z = x
+ yi$ is
\begin{equation*}
\textrm{proj}(z)
= \begin{cases}
    z & \textrm{if} \ z \ \textrm{is finite, and} \\
    0 + \textrm{sign}(y)i & \textrm{otherwise,}
\end{cases}
\end{equation*}
where $\textrm{sign}(y)$ is -1 if $y$ is negative and 1 otherwise.
{{< since 2.28 >}}


<!-- complex; polar; (real r, real theta); -->
\index{{\tt \bfseries polar }!{\tt (real r, real theta): complex}|hyperpage}

`complex` **`polar`**`(real r, real theta)`<br>\newline
Return the complex number with magnitude (absolute value) `r` and
phase angle `theta`.
{{< since 2.28 >}}


## Complex exponential and power functions {#complex-exponential}

The exponential, log, and power functions may be supplied with complex
arguments with specialized meanings that generalize their real
counterparts.  These versions are only called when the argument is
complex.

<!-- complex; exp; (complex z); -->
\index{{\tt \bfseries exp }!{\tt (complex z): complex}|hyperpage}

`complex` **`exp`**`(complex z)`<br>\newline
Return the complex natural exponential of `z`, which for $z = x + yi$
is
\begin{equation*}
\exp z = \exp(x) \textrm{cis}(y) = \exp(x) (\cos(y) + i \sin(y)).
\end{equation*}
{{< since 2.28 >}}

<!-- complex; log; (complex z); -->
\index{{\tt \bfseries log }!{\tt (complex z): complex}|hyperpage}

`complex` **`log`**`(complex z)`<br>\newline
Return the complex natural logarithm of `z`, which for $z = \textrm{polar}(r,
\theta)$ is
\begin{equation*}
\log z = \log r + \theta i.
\end{equation*}
{{< since 2.28 >}}

<!-- complex; log10; (complex z); -->
\index{{\tt \bfseries log10 }!{\tt (complex z): complex}|hyperpage}

`complex` **`log10`**`(complex z)`<br>\newline
Return the complex common logarithm of `z`,
\begin{equation*}
\log_{10} z = \frac{\log z}{\log 10}.
\end{equation*}
{{< since 2.28 >}}

<!-- complex; pow; (complex x, complex y); -->
\index{{\tt \bfseries pow }!{\tt (complex x, complex y): complex}|hyperpage}

`complex` **`pow`**`(complex x, complex y)`<br>\newline
Return x raised to the power of y,
\begin{equation*}
\text{pow}(x,y) = \textrm{exp}(y \, \log(x)).
\end{equation*}
{{< since 2.28 >}}


<!-- Z; pow; (T1 x, T2 y); -->
\index{{\tt \bfseries pow }!{\tt (T1 x, T2 y): Z}|hyperpage}

`Z` **`pow`**`(T1 x, T2 y)`<br>\newline
Vectorized implementation of the `pow` function
{{< since 2.30 >}}

<!-- complex; sqrt; (complex x); -->
\index{{\tt \bfseries sqrt }!{\tt (complex x): complex}|hyperpage}

`complex` **`sqrt`**`(complex x)`<br>\newline
Return the complex square root of x with branch cut along the negative
real axis.  For finite inputs, the result will be in the right
half-plane.
{{< since 2.28 >}}


## Complex trigonometric functions {#complex-trig}

The standard trigonometric functions are supported for complex numbers.

<!-- complex; cos; (complex z); -->
\index{{\tt \bfseries cos }!{\tt (complex z): complex}|hyperpage}

`complex` **`cos`**`(complex z)`<br>\newline
Return the complex cosine of z, which is
\begin{equation*}
\cos(z)
= \textrm{cosh}(z \, i)
= \frac{\displaystyle \exp(z \, i) + \exp(-z \, i)}
       {\displaystyle 2}.
\end{equation*}
{{< since 2.28 >}}

<!-- complex; sin; (complex z); -->
\index{{\tt \bfseries sin }!{\tt (complex z): complex}|hyperpage}

`complex` **`sin`**`(complex z)`<br>\newline
Return the complex sine of z,
\begin{equation*}
\sin(z)
= -\textrm{sinh}(z \, i) \, i
= \frac{\displaystyle \exp(z \, i) - \exp(-z \, i)}
       {\displaystyle 2 \, i}.
\end{equation*}
{{< since 2.28 >}}


<!-- complex; tan; (complex z); -->
\index{{\tt \bfseries tan }!{\tt (complex z): complex}|hyperpage}

`complex` **`tan`**`(complex z)`<br>\newline
Return the complex tangent of z,
\begin{equation*}
\tan(z)
= -\textrm{tanh}(z \, i) \, i
= \frac{(\exp(-z \, i) - \exp(z \, i)) \, i}
       {\exp(-z \, i) + \exp(z \, i)}.
\end{equation*}
{{< since 2.28 >}}

<!-- complex; acos; (complex z); -->
\index{{\tt \bfseries acos }!{\tt (complex z): complex}|hyperpage}

`complex` **`acos`**`(complex z)`<br>\newline
Return the complex arc (inverse) cosine of z,
\begin{equation*}
\textrm{acos}(z)
= \frac{1}{2} \pi + \log (z \, i + \sqrt{1 - z^2}) \, i.
\end{equation*}
{{< since 2.28 >}}

<!-- complex; asin; (complex z); -->
\index{{\tt \bfseries asin }!{\tt (complex z): complex}|hyperpage}

`complex` **`asin`**`(complex z)`<br>\newline
Return the complex arc (inverse) sine of z,
\begin{equation*}
\text{asin}(z)
= -\log(z \, i + \sqrt{1 - z^2}) \, i.
\end{equation*}
{{< since 2.28 >}}

<!-- complex; atan; (complex z); -->
\index{{\tt \bfseries atan }!{\tt (complex z): complex}|hyperpage}

`complex` **`atan`**`(complex z)`<br>\newline
Return the complex arc (inverse) tangent of z,
\begin{equation*}
\text{atan}(z)
= - \frac{1}{2} (\log(1 - z \, i) - \log(1 + z \, i)) \, i.
\end{equation*}
{{< since 2.28 >}}



## Complex hyperbolic trigonometric functions {#complex-h-trig}

The standard hyperbolic trigonometric functions are supported for
complex numbers.

<!-- complex; cosh; (complex z); -->
\index{{\tt \bfseries cosh }!{\tt (complex z): complex}|hyperpage}

`complex` **`cosh`**`(complex z)`<br>\newline
Return the complex hyperbolic cosine of z,
\begin{equation*}
\textrm{cosh}(z)
= \frac{\exp(z) + \exp(-z)}
       {2}.
\end{equation*}
{{< since 2.28 >}}

<!-- complex; sinh; (complex z); -->
\index{{\tt \bfseries sinh }!{\tt (complex z): complex}|hyperpage}

`complex` **`sinh`**`(complex z)`<br>\newline
Return the complex hyperbolic sine of z,
\begin{equation*}
\textrm{sinh}(z)
= \frac{\displaystyle \exp(z) - \exp(-z)}
       {\displaystyle 2}.
\end{equation*}
{{< since 2.28 >}}

<!-- complex; tanh; (complex z); -->
\index{{\tt \bfseries tanh }!{\tt (complex z): complex}|hyperpage}

`complex` **`tanh`**`(complex z)`<br>\newline
Return the complex hyperbolic tangent of z,
\begin{equation*}
\textrm{tanh}(z)
\ = \ \frac{\textrm{sinh}(z)}
           {\textrm{cosh}(z)}
\ = \ \frac{\displaystyle \exp(z) - \exp(-z)}
           {\displaystyle \exp(z) + \exp(-z)}.
\end{equation*}
{{< since 2.28 >}}


<!-- complex; acosh; (complex z); -->
\index{{\tt \bfseries acosh }!{\tt (complex z): complex}|hyperpage}

`complex` **`acosh`**`(complex z)`<br>\newline
Return the complex hyperbolic arc (inverse) cosine of z,
\begin{equation*}
\textrm{acosh}(z)
= \log(z + \sqrt{(z + 1)(z - 1)}).
\end{equation*}
{{< since 2.28 >}}

<!-- complex; asinh; (complex z); -->
\index{{\tt \bfseries asinh }!{\tt (complex z): complex}|hyperpage}

`complex` **`asinh`**`(complex z)`<br>\newline
Return the complex hyperbolic arc (inverse) sine of z,
\begin{equation*}
\textrm{asinh}(z)
= \log(z + \sqrt{1 + z^2}).
\end{equation*}
{{< since 2.28 >}}

<!-- complex; atanh; (complex z); -->
\index{{\tt \bfseries atanh }!{\tt (complex z): complex}|hyperpage}

`complex` **`atanh`**`(complex z)`<br>\newline
Return the complex hyperbolic arc (inverse) tangent of z,
\begin{equation*}
\textrm{atanh}(z)
= \frac{\log(1 + z) - \log(1 - z)}
       {2}.
\end{equation*}
{{< since 2.28 >}}
