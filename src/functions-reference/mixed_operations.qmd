---
pagetitle: Mixed Operations
---

# Mixed Operations {#mixed-operations}



These functions perform conversions between Stan containers matrix,
vector, row vector and arrays.

<!-- matrix; to_matrix; (matrix m); -->
\index{{\tt \bfseries to\_matrix }!{\tt (matrix m): matrix}|hyperpage}

`matrix` **`to_matrix`**`(matrix m)`<br>\newline
Return the matrix `m` itself.
{{< since 2.3 >}}

<!-- complex_matrix; to_matrix; (complex_matrix m); -->
\index{{\tt \bfseries to\_matrix }!{\tt (complex\_matrix m): complex\_matrix}|hyperpage}

`complex_matrix` **`to_matrix`**`(complex_matrix m)`<br>\newline
Return the matrix `m` itself.
{{< since 2.30 >}}

<!-- matrix; to_matrix; (vector v); -->
\index{{\tt \bfseries to\_matrix }!{\tt (vector v): matrix}|hyperpage}

`matrix` **`to_matrix`**`(vector v)`<br>\newline
Convert the column vector `v` to a `size(v)` by 1 matrix.
{{< since 2.3 >}}

<!-- complex_matrix; to_matrix; (complex_vector v); -->
\index{{\tt \bfseries to\_matrix }!{\tt (complex\_vector v): complex\_matrix}|hyperpage}

`complex_matrix` **`to_matrix`**`(complex_vector v)`<br>\newline
Convert the column vector `v` to a `size(v)` by 1 matrix.
{{< since 2.30 >}}

<!-- matrix; to_matrix; (row_vector v); -->
\index{{\tt \bfseries to\_matrix }!{\tt (row\_vector v): matrix}|hyperpage}

`matrix` **`to_matrix`**`(row_vector v)`<br>\newline
Convert the row vector `v` to a 1 by `size(v)` matrix.
{{< since 2.3 >}}

<!-- complex_matrix; to_matrix; (complex_row_vector v); -->
\index{{\tt \bfseries to\_matrix }!{\tt (complex\_row\_vector v): complex\_matrix}|hyperpage}

`complex_matrix` **`to_matrix`**`(complex_row_vector v)`<br>\newline
Convert the row vector `v` to a 1 by `size(v)` matrix.
{{< since 2.30 >}}

<!-- matrix; to_matrix; (matrix M, int m, int n); -->
\index{{\tt \bfseries to\_matrix }!{\tt (matrix M, int m, int n): matrix}|hyperpage}

`matrix` **`to_matrix`**`(matrix M, int m, int n)`<br>\newline
Convert a matrix `A` to a matrix with `m` rows and `n` columns filled in
column-major order.
{{< since 2.15 >}}

<!-- complex_matrix; to_matrix; (complex_matrix M, int m, int n); -->
\index{{\tt \bfseries to\_matrix }!{\tt (complex\_matrix M, int m, int n): complex\_matrix}|hyperpage}

`complex_matrix` **`to_matrix`**`(complex_matrix M, int m, int n)`<br>\newline
Convert a matrix `A` to a matrix with `m` rows and `n` columns filled in
column-major order.
{{< since 2.30 >}}

<!-- matrix; to_matrix; (vector v, int m, int n); -->
\index{{\tt \bfseries to\_matrix }!{\tt (vector v, int m, int n): matrix}|hyperpage}

`matrix` **`to_matrix`**`(vector v, int m, int n)`<br>\newline
Convert a vector `v` to a matrix with `m` rows and `n` columns filled in
column-major order.
{{< since 2.15 >}}

<!-- complex_matrix; to_matrix; (complex_vector v, int m, int n); -->
\index{{\tt \bfseries to\_matrix }!{\tt (complex\_vector v, int m, int n): complex\_matrix}|hyperpage}

`complex_matrix` **`to_matrix`**`(complex_vector v, int m, int n)`<br>\newline
Convert a vector `v` to a matrix with `m` rows and `n` columns filled in
column-major order.
{{< since 2.30 >}}

<!-- matrix; to_matrix; (row_vector v, int m, int n); -->
\index{{\tt \bfseries to\_matrix }!{\tt (row\_vector v, int m, int n): matrix}|hyperpage}

`matrix` **`to_matrix`**`(row_vector v, int m, int n)`<br>\newline
Convert a row_vector `v` to a matrix with `m` rows and `n` columns filled in
column-major order.
{{< since 2.15 >}}

<!-- complex_matrix; to_matrix; (complex_row_vector v, int m, int n); -->
\index{{\tt \bfseries to\_matrix }!{\tt (complex\_row\_vector v, int m, int n): complex\_matrix}|hyperpage}

`complex_matrix` **`to_matrix`**`(complex_row_vector v, int m, int n)`<br>\newline
Convert a row vector `v` to a matrix with `m` rows and `n` columns filled in
column-major order.
{{< since 2.30 >}}

<!-- matrix; to_matrix; (matrix A, int m, int n, int col_major); -->
\index{{\tt \bfseries to\_matrix }!{\tt (matrix A, int m, int n, int col\_major): matrix}|hyperpage}

`matrix` **`to_matrix`**`(matrix A, int m, int n, int col_major)`<br>\newline
Convert a matrix `A` to a matrix with `m` rows and `n` columns filled in
row-major order if `col_major` equals 0 (otherwise, they get filled in
column-major order).
{{< since 2.15 >}}

<!-- complex_matrix; to_matrix; (complex_matrix A, int m, int n, int col_major); -->
\index{{\tt \bfseries to\_matrix }!{\tt (complex\_matrix A, int m, int n, int col\_major): complex\_matrix}|hyperpage}

`complex_matrix` **`to_matrix`**`(complex_matrix A, int m, int n, int col_major)`<br>\newline
Convert a matrix `A` to a matrix with `m` rows and `n` columns filled in
row-major order if `col_major` equals 0 (otherwise, they get filled in
column-major order).
{{< since 2.30 >}}

<!-- matrix; to_matrix; (vector v, int m, int n, int col_major); -->
\index{{\tt \bfseries to\_matrix }!{\tt (vector v, int m, int n, int col\_major): matrix}|hyperpage}

`matrix` **`to_matrix`**`(vector v, int m, int n, int col_major)`<br>\newline
Convert a vector `v` to a matrix with `m` rows and `n` columns filled in
row-major order if `col_major` equals 0 (otherwise, they get filled in
column-major order).
{{< since 2.15 >}}

<!-- complex_matrix; to_matrix; (complex_vector v, int m, int n, int col_major); -->
\index{{\tt \bfseries to\_matrix }!{\tt (complex\_vector v, int m, int n, int col\_major): complex\_matrix}|hyperpage}

`complex_matrix` **`to_matrix`**`(complex_vector v, int m, int n, int col_major)`<br>\newline
Convert a vector `v` to a matrix with `m` rows and `n` columns filled in
row-major order if `col_major` equals 0 (otherwise, they get filled in
column-major order).
{{< since 2.30 >}}

<!-- matrix; to_matrix; (row_vector v, int m, int n, int col_major); -->
\index{{\tt \bfseries to\_matrix }!{\tt (row\_vector v, int m, int n, int col\_major): matrix}|hyperpage}

`matrix` **`to_matrix`**`(row_vector v, int m, int n, int col_major)`<br>\newline
Convert a row vector `v` to a matrix with `m` rows and `n` columns filled in
row-major order if `col_major` equals 0 (otherwise, they get filled in
column-major order).
{{< since 2.15 >}}

<!-- complex_matrix; to_matrix; (complex_row_vector v, int m, int n, int col_major); -->
\index{{\tt \bfseries to\_matrix }!{\tt (complex\_row\_vector v, int m, int n, int col\_major): complex\_matrix}|hyperpage}

`complex_matrix` **`to_matrix`**`(complex_row_vector v, int m, int n, int col_major)`<br>\newline
Convert a row vector `v` to a matrix with `m` rows and `n` columns filled in
row-major order if `col_major` equals 0 (otherwise, they get filled in
column-major order).
{{< since 2.30 >}}

<!-- matrix; to_matrix; (array[] real a, int m, int n); -->
\index{{\tt \bfseries to\_matrix }!{\tt (array[] real a, int m, int n): matrix}|hyperpage}

`matrix` **`to_matrix`**`(array[] real a, int m, int n)`<br>\newline
Convert a one-dimensional array `a` to a matrix with `m` rows and `n`
columns filled in column-major order.
{{< since 2.15 >}}

<!-- matrix; to_matrix; (array[] int a, int m, int n); -->
\index{{\tt \bfseries to\_matrix }!{\tt (array[] int a, int m, int n): matrix}|hyperpage}

`matrix` **`to_matrix`**`(array[] int a, int m, int n)`<br>\newline
Convert a one-dimensional array `a` to a matrix with `m` rows and `n`
columns filled in column-major order.
{{< since 2.15 >}}

<!-- complex_matrix; to_matrix; (array[] complex a, int m, int n); -->
\index{{\tt \bfseries to\_matrix }!{\tt (array[] complex a, int m, int n): complex\_matrix}|hyperpage}

`complex_matrix` **`to_matrix`**`(array[] complex a, int m, int n)`<br>\newline
Convert a one-dimensional array `a` to a matrix with `m` rows and `n`
columns filled in column-major order.
{{< since 2.30 >}}

<!-- matrix; to_matrix; (array[] real a, int m, int n, int col_major); -->
\index{{\tt \bfseries to\_matrix }!{\tt (array[] real a, int m, int n, int col\_major): matrix}|hyperpage}

`matrix` **`to_matrix`**`(array[] real a, int m, int n, int col_major)`<br>\newline
Convert a one-dimensional array `a` to a matrix with `m` rows and `n`
columns filled in row-major order if `col_major` equals 0 (otherwise,
they get filled in column-major order).
{{< since 2.15 >}}

<!-- matrix; to_matrix; (array[] int a, int m, int n, int col_major); -->
\index{{\tt \bfseries to\_matrix }!{\tt (array[] int a, int m, int n, int col\_major): matrix}|hyperpage}

`matrix` **`to_matrix`**`(array[] int a, int m, int n, int col_major)`<br>\newline
Convert a one-dimensional array `a` to a matrix with `m` rows and `n`
columns filled in row-major order if `col_major` equals 0 (otherwise,
they get filled in column-major order).
{{< since 2.15 >}}


<!-- complex_matrix; to_matrix; (array[] complex a, int m, int n, int col_major); -->
\index{{\tt \bfseries to\_matrix }!{\tt (array[] complex a, int m, int n, int col\_major): complex\_matrix}|hyperpage}

`complex_matrix` **`to_matrix`**`(array[] complex a, int m, int n, int col_major)`<br>\newline
Convert a one-dimensional array `a` to a matrix with `m` rows and `n`
columns filled in row-major order if `col_major` equals 0 (otherwise,
they get filled in column-major order).
{{< since 2.30 >}}

<!-- matrix; to_matrix; (array[] row_vector vs); -->
\index{{\tt \bfseries to\_matrix }!{\tt (array[] row\_vector vs): matrix}|hyperpage}

`matrix` **`to_matrix`**`(array[] row_vector vs)`<br>\newline
Convert a one-dimensional array of row vectors to a matrix, where the size of
the array is the number of rows of the resulting matrix and the length of row
vectors is the number of columns.
{{< since 2.28 >}}

<!-- complex_matrix; to_matrix; (array[] complex_row_vector vs); -->
\index{{\tt \bfseries to\_matrix }!{\tt (array[] complex\_row\_vector vs): complex\_matrix}|hyperpage}

`complex_matrix` **`to_matrix`**`(array[] complex_row_vector vs)`<br>\newline
Convert a one-dimensional array of row vectors to a matrix, where the size of
the array is the number of rows of the resulting matrix and the length of row
vectors is the number of columns.
{{< since 2.30 >}}

<!-- matrix; to_matrix; (array[,] real a); -->
\index{{\tt \bfseries to\_matrix }!{\tt (array[,] real a): matrix}|hyperpage}

`matrix` **`to_matrix`**`(array[,] real a)`<br>\newline
Convert the two dimensional array `a` to a matrix with the same
dimensions and indexing order.
{{< since 2.3 >}}

<!-- matrix; to_matrix; (array[,] int a); -->
\index{{\tt \bfseries to\_matrix }!{\tt (array[,] int a): matrix}|hyperpage}

`matrix` **`to_matrix`**`(array[,] int a)`<br>\newline
Convert the two dimensional array `a` to a matrix with the same
dimensions and indexing order. If any of the dimensions of `a` are zero,
the result will be a $0 \times 0$ matrix.
{{< since 2.3 >}}

<!-- complex_matrix; to_matrix; (array[,] complex a ); -->
\index{{\tt \bfseries to\_matrix }!{\tt (array[,] complex a ): complex\_matrix}|hyperpage}

`complex_matrix` **`to_matrix`**`(array[,] complex a )`<br>\newline
Convert the two dimensional array `a` to a matrix with the same
dimensions and indexing order.
{{< since 2.30 >}}

<!-- vector; to_vector; (matrix m); -->
\index{{\tt \bfseries to\_vector }!{\tt (matrix m): vector}|hyperpage}

`vector` **`to_vector`**`(matrix m)`<br>\newline
Convert the matrix `m` to a column vector in column-major order.
{{< since 2.0 >}}

<!-- complex_vector; to_vector; (complex_matrix m); -->
\index{{\tt \bfseries to\_vector }!{\tt (complex\_matrix m): complex\_vector}|hyperpage}

`complex_vector` **`to_vector`**`(complex_matrix m)`<br>\newline
Convert the matrix `m` to a column vector in column-major order.
{{< since 2.30 >}}


<!-- vector; to_vector; (vector v); -->
\index{{\tt \bfseries to\_vector }!{\tt (vector v): vector}|hyperpage}

`vector` **`to_vector`**`(vector v)`<br>\newline
Return the column vector `v` itself.
{{< since 2.3 >}}


<!-- complex_vector; to_vector; (complex_vector v); -->
\index{{\tt \bfseries to\_vector }!{\tt (complex\_vector v): complex\_vector}|hyperpage}

`complex_vector` **`to_vector`**`(complex_vector v)`<br>\newline
Return the column vector `v` itself.
{{< since 2.30 >}}


<!-- vector; to_vector; (row_vector v); -->
\index{{\tt \bfseries to\_vector }!{\tt (row\_vector v): vector}|hyperpage}

`vector` **`to_vector`**`(row_vector v)`<br>\newline
Convert the row vector `v` to a column vector.
{{< since 2.3 >}}

<!-- complex_vector; to_vector; (complex_row_vector v); -->
\index{{\tt \bfseries to\_vector }!{\tt (complex\_row\_vector v): complex\_vector}|hyperpage}

`complex_vector` **`to_vector`**`(complex_row_vector v)`<br>\newline
Convert the row vector `v` to a column vector.
{{< since 2.30 >}}

<!-- vector; to_vector; (array[] real a); -->
\index{{\tt \bfseries to\_vector }!{\tt (array[] real a): vector}|hyperpage}

`vector` **`to_vector`**`(array[] real a)`<br>\newline
Convert the one-dimensional array `a` to a column vector.
{{< since 2.3 >}}

<!-- vector; to_vector; (array[] int a); -->
\index{{\tt \bfseries to\_vector }!{\tt (array[] int a): vector}|hyperpage}

`vector` **`to_vector`**`(array[] int a)`<br>\newline
Convert the one-dimensional integer array `a` to a column vector.
{{< since 2.3 >}}

<!-- complex_vector; to_vector; (array[] complex a); -->
\index{{\tt \bfseries to\_vector }!{\tt (array[] complex a): complex\_vector}|hyperpage}

`complex_vector` **`to_vector`**`(array[] complex a)`<br>\newline
Convert the one-dimensional complex array `a` to a column vector.
{{< since 2.30 >}}

<!-- row_vector; to_row_vector; (matrix m); -->
\index{{\tt \bfseries to\_row\_vector }!{\tt (matrix m): row\_vector}|hyperpage}

`row_vector` **`to_row_vector`**`(matrix m)`<br>\newline
Convert the matrix `m` to a row vector in column-major order.
{{< since 2.3 >}}

<!-- complex_row_vector; to_row_vector; (complex_matrix m); -->
\index{{\tt \bfseries to\_row\_vector }!{\tt (complex\_matrix m): complex\_row\_vector}|hyperpage}

`complex_row_vector` **`to_row_vector`**`(complex_matrix m)`<br>\newline
Convert the matrix `m` to a row vector in column-major order.
{{< since 2.30 >}}

<!-- row_vector; to_row_vector; (vector v); -->
\index{{\tt \bfseries to\_row\_vector }!{\tt (vector v): row\_vector}|hyperpage}

`row_vector` **`to_row_vector`**`(vector v)`<br>\newline
Convert the column vector `v` to a row vector.
{{< since 2.3 >}}

<!-- complex_row_vector; to_row_vector; (complex_vector v); -->
\index{{\tt \bfseries to\_row\_vector }!{\tt (complex\_vector v): complex\_row\_vector}|hyperpage}

`complex_row_vector` **`to_row_vector`**`(complex_vector v)`<br>\newline
Convert the column vector `v` to a row vector.
{{< since 2.30 >}}


<!-- row_vector; to_row_vector; (row_vector v); -->
\index{{\tt \bfseries to\_row\_vector }!{\tt (row\_vector v): row\_vector}|hyperpage}

`row_vector` **`to_row_vector`**`(row_vector v)`<br>\newline
Return the row vector `v` itself.
{{< since 2.3 >}}

<!-- complex_row_vector; to_row_vector; (complex_row_vector v); -->
\index{{\tt \bfseries to\_row\_vector }!{\tt (complex\_row\_vector v): complex\_row\_vector}|hyperpage}

`complex_row_vector` **`to_row_vector`**`(complex_row_vector v)`<br>\newline
Return the row vector `v` itself.
{{< since 2.30 >}}

<!-- row_vector; to_row_vector; (array[] real a); -->
\index{{\tt \bfseries to\_row\_vector }!{\tt (array[] real a): row\_vector}|hyperpage}

`row_vector` **`to_row_vector`**`(array[] real a)`<br>\newline
Convert the one-dimensional array `a` to a row vector.
{{< since 2.3 >}}

<!-- row_vector; to_row_vector; (array[] int a); -->
\index{{\tt \bfseries to\_row\_vector }!{\tt (array[] int a): row\_vector}|hyperpage}

`row_vector` **`to_row_vector`**`(array[] int a)`<br>\newline
Convert the one-dimensional array `a` to a row vector.
{{< since 2.3 >}}

<!-- complex_row_vector; to_row_vector; (array[] complex a); -->
\index{{\tt \bfseries to\_row\_vector }!{\tt (array[] complex a): complex\_row\_vector}|hyperpage}

`complex_row_vector` **`to_row_vector`**`(array[] complex a)`<br>\newline
Convert the one-dimensional complex array `a` to a row vector.
{{< since 2.30 >}}


<!-- array[,] real; to_array_2d; (matrix m); -->
\index{{\tt \bfseries to\_array\_2d }!{\tt (matrix m): array[,] real}|hyperpage}

`array[,] real` **`to_array_2d`**`(matrix m)`<br>\newline
Convert the matrix `m` to a two dimensional array with the same
dimensions and indexing order.
{{< since 2.3 >}}

<!-- array[,] real; to_array_2d; (complex_matrix m); -->
\index{{\tt \bfseries to\_array\_2d }!{\tt (complex\_matrix m): array[,] complex}|hyperpage}

`array[,] complex` **`to_array_2d`**`(complex_matrix m)`<br>\newline
Convert the matrix `m` to a two dimensional array with the same
dimensions and indexing order.
{{< since 2.30 >}}

<!-- array[] real; to_array_1d; (vector v); -->
\index{{\tt \bfseries to\_array\_1d }!{\tt (vector v): array[] real}|hyperpage}

`array[] real` **`to_array_1d`**`(vector v)`<br>\newline
Convert the column vector `v` to a one-dimensional array.
{{< since 2.3 >}}

<!-- array[] real; to_array_1d; (complex_vector v); -->
\index{{\tt \bfseries to\_array\_1d }!{\tt (complex\_vector v): array[] complex}|hyperpage}

`array[] complex` **`to_array_1d`**`(complex_vector v)`<br>\newline
Convert the column vector `v` to a one-dimensional array.
{{< since 2.30 >}}


<!-- array[] real; to_array_1d; (row_vector v); -->
\index{{\tt \bfseries to\_array\_1d }!{\tt (row\_vector v): array[] real}|hyperpage}

`array[] real` **`to_array_1d`**`(row_vector v)`<br>\newline
Convert the row vector `v` to a one-dimensional array.
{{< since 2.3 >}}

<!-- array[] complex; to_array_1d; (complex_row_vector v); -->
\index{{\tt \bfseries to\_array\_1d }!{\tt (complex\_row\_vector v): array[] complex}|hyperpage}

`array[] complex` **`to_array_1d`**`(complex_row_vector v)`<br>\newline
Convert the row vector `v` to a one-dimensional array.
{{< since 2.30 >}}

<!-- array[] real; to_array_1d; (matrix m); -->
\index{{\tt \bfseries to\_array\_1d }!{\tt (matrix m): array[] real}|hyperpage}

`array[] real` **`to_array_1d`**`(matrix m)`<br>\newline
Convert the matrix `m` to a one-dimensional array in column-major order.
{{< since 2.3 >}}

<!-- array[] complex; to_array_1d; (complex_matrix m); -->
\index{{\tt \bfseries to\_array\_1d }!{\tt (complex\_matrix m): array[] complex}|hyperpage}

`array[] real` **`to_array_1d`**`(complex_matrix m)`<br>\newline
Convert the matrix `m` to a one-dimensional array in column-major order.
{{< since 2.30 >}}

<!-- array[] real; to_array_1d; (array[...] real a); -->
\index{{\tt \bfseries to\_array\_1d }!{\tt (array[...] real a): array[] real}|hyperpage}

`array[] real` **`to_array_1d`**`(array[...] real a)`<br>\newline
Convert the array `a` (of any dimension up to 10) to a one-dimensional
array in row-major order.
{{< since 2.3 >}}

<!-- array[] int; to_array_1d; (array[...] int a); -->
\index{{\tt \bfseries to\_array\_1d }!{\tt (array[...] int a): array[] int}|hyperpage}

`array[] int` **`to_array_1d`**`(array[...] int a)`<br>\newline
Convert the array `a` (of any dimension up to 10) to a one-dimensional
array in row-major order.
{{< since 2.3 >}}

<!-- array[] complex; to_array_1d; (array[...] complex a); -->
\index{{\tt \bfseries to\_array\_1d }!{\tt (array[...] complex a): array[] complex}|hyperpage}

`array[] complex` **`to_array_1d`**`(array[...] complex a)`<br>\newline
Convert the array `a` (of any dimension up to 10) to a one-dimensional
array in row-major order.
{{< since 2.30 >}}
